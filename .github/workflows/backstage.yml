---
on:
  push:
    #paths:
      #- '.github/workflows/backstage.yml'
      #- 'Backstage/**'
    branches:
      - backstage-deploy

env:
  # pulltag: used to pull release from https://github.com/backstage/backstage
  pulltag: "v0.65.1"
  # pushtag: used to push custom image to cxtsiacr.azurecr.io
  pushtag: "0.1.4"

jobs:

# Check if tag exists, only build if not

  checktag:
    name: Check if tag exists
    runs-on: catena-x
    environment: Catena-X Backstage
    outputs:
      build: ${{steps.checktagstep.outputs.build}}
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Check tag
        id: checktagstep
        run: |
          tags=$(az acr repository show-tags -n cxtsiacr --repository backstage)
          echo $tags
          if ! echo $tags | grep ${{env.pushtag}}; then
            echo "::set-output name=build::true"
          else
            echo "::set-output name=build::false"
          fi

  build:
    name: Build Backstage
    runs-on: catena-x
    environment: Catena-X Backstage
    needs: checktag
    if: ${{needs.checktag.outputs.build=='true'}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Checkout Backstage ${{env.pulltag}}
        uses: actions/checkout@v2
        with:
          repository: backstage/backstage
          ref: ${{env.pulltag}}
          path: Backstage/backstage

      - name: Build Backstage
        run: |
          
          cd Backstage
          yes | cp -f files/* backstage/packages/app/src
          
          export NODE_OPTIONS="--max-old-space-size=4096"
          cd backstage
          
          yarn install --frozen-lockfile
          yarn tsc
          yarn build
          
          docker build .  \
          -f packages/backend/Dockerfile \
          -t cxtsiacr.azurecr.io/backstage:${{env.pushtag}}
          
          docker login cxtsiacr.azurecr.io \
          -u ${{secrets.ACR_USER}} \
          -p ${{secrets.ACR_PASS}}
          
          docker push cxtsiacr.azurecr.io/backstage:${{env.pushtag}}

  deploy-build:
    name: Deploy Backstage (with build)
    runs-on: ubuntu-latest
    environment: Catena-X Backstage
    needs: [checktag,build]
    if: ${{needs.checktag.outputs.build=='true'}}
    env:
      TOKEN_GITHUB: ${{secrets.TOKEN_GITHUB}}
      AUTH_GITHUB_CLIENT_ID: ${{secrets.AUTH_GITHUB_CLIENT_ID}}
      AUTH_GITHUB_CLIENT_SECRET: ${{secrets.AUTH_GITHUB_CLIENT_SECRET}}
      PG_HOST: ${{secrets.PG_HOST}}
      PG_PORT: ${{secrets.PG_PORT}}
      PG_USER: ${{secrets.PG_USER}}
      PG_PASS: ${{secrets.PG_PASS}}
      PG_DB: ${{secrets.PG_DB}}
      BACKEND_SECRET: ${{secrets.BACKEND_SECRET}}
      CXTSI_ACR_DOCKER_CONFIG: ${{secrets.CXTSI_ACR_DOCKER_CONFIG}}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set Kube Context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{secrets.KUBECONFIG}}

      - name: Deploy Backstage
        working-directory: Backstage/chart
        run: |
          helm upgrade -i backstage-helmtest . \
          -n backstage-helmtest \
          -f devopstools-values.yaml \
          --create-namespace \
          --atomic \
          --set token_github="$TOKEN_GITHUB" \
          --set auth_github_client_id="$AUTH_GITHUB_CLIENT_ID" \
          --set auth_github_client_secret="$AUTH_GITHUB_CLIENT_SECRET" \
          --set pg_host="$PG_HOST" \
          --set pg_port="$PG_PORT" \
          --set pg_user="$PG_USER" \
          --set pg_pass="$PG_PASS" \
          --set pg_db="$PG_DB" \
          --set backend_secret="$BACKEND_SECRET" \
          --set cxtsi_acr_docker_config="$CXTSI_ACR_DOCKER_CONFIG" \
          --set backend.image.tag=${{env.pushtag}}

  deploy-nobuid:
    name: Deploy Backstage (without build)
    runs-on: ubuntu-latest
    environment: Catena-X Backstage
    needs: checktag
    if: ${{needs.checktag.outputs.build=='false'}}
    env:
      TOKEN_GITHUB: ${{secrets.TOKEN_GITHUB}}
      AUTH_GITHUB_CLIENT_ID: ${{secrets.AUTH_GITHUB_CLIENT_ID}}
      AUTH_GITHUB_CLIENT_SECRET: ${{secrets.AUTH_GITHUB_CLIENT_SECRET}}
      PG_HOST: ${{secrets.PG_HOST}}
      PG_PORT: ${{secrets.PG_PORT}}
      PG_USER: ${{secrets.PG_USER}}
      PG_PASS: ${{secrets.PG_PASS}}
      PG_DB: ${{secrets.PG_DB}}
      BACKEND_SECRET: ${{secrets.BACKEND_SECRET}}
      CXTSI_ACR_DOCKER_CONFIG: ${{secrets.CXTSI_ACR_DOCKER_CONFIG}}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set Kube Context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{secrets.KUBECONFIG}}

      - name: Deploy Backstage
        working-directory: Backstage/chart
        run: |
          helm upgrade -i backstage-helmtest . \
          -n backstage-helmtest \
          -f devopstools-values.yaml \
          --create-namespace \
          --atomic \
          --set token_github="$TOKEN_GITHUB" \
          --set auth_github_client_id="$AUTH_GITHUB_CLIENT_ID" \
          --set auth_github_client_secret="$AUTH_GITHUB_CLIENT_SECRET" \
          --set pg_host="$PG_HOST" \
          --set pg_port="$PG_PORT" \
          --set pg_user="$PG_USER" \
          --set pg_pass="$PG_PASS" \
          --set pg_db="$PG_DB" \
          --set backend_secret="$BACKEND_SECRET" \
          --set cxtsi_acr_docker_config="$CXTSI_ACR_DOCKER_CONFIG" \
          --set backend.image.tag=${{env.pushtag}}

#      - name: Deploy Backstage
#        uses: deliverybot/helm@v1
#        with:
#          release: backstage
#          namespace: backstage
#          chart: deliveryhero/backstage
#          repository: https://charts.deliveryhero.io/
#          value-files: Backstage/backstage-values.yaml
#        env:
#          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
...
